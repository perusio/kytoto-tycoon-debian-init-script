#! /bin/bash
### BEGIN INIT INFO
# Provides:             kyototycoon
# Required-Start:       $syslog $remote_fs
# Required-Stop:        $syslog $remote_fs
# Should-Start:         $local_fs
# Should-Stop:          $local_fs
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    kyototycoon - lightweight DB server.
# Description: kyototycoon - lightweight DB server that can work with
#              multiple DB engines.
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/ktserver
RUNDIR=/var/run/kyototycoon
PIDFILE=$RUNDIR/kyototycoon.pid
LOGFILE="/var/log/ktserver.log"
DAEMON_ARGS="-dmn"
NAME=kyototycoon
DESC=kyototycoon
PORT=1978
DATADIR="/var/lib/kyototycoon"
KT_USER=kyototycoon
KT_GROUP=kyototycoon
DATABASES=""

test -x $DAEMON || exit 0

## Source the default definitions.
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

## Check if the server is already running.
check_server_running (){
    local count=$(netstat --listen --numeric-ports | grep \:$PORT[[:space:]] | grep -c .)

    if [ $count -eq 1 ]; then
        echo "$DESC is running in port $PORT and PID $(pidof $DAEMON)."
        return 1
    fi
    return 0
}

## Prepare the startup.
prepare_startup () {
    # Create the DB dir.
    if [ ! -d $DATADIR ]; then
        mkdir -p $DATADIR
        chown $KT_USER:$KT_GROUP $DATADIR
    fi
    ## Create the run dir.
    if [ ! -d $RUNDIR ]; then
        mkdir -p $RUNDIR
        touch $PIDFILE
        chown $KT_USER:$KT_GROUP $RUNDIR $PIDFILE
        chmod 755 $RUNDIR
    fi
}

SU=/bin/su

## Start the server.
do_start () {
    if check_server_running; then
        echo -n $"Starting $DESC: "
        prepare_startup
        $SU -l $KT_USER --shell=/bin/bash -c "$DAEMON $DAEMON_ARGS -port $PORT -log $LOGFILE -pid $PIDFILE $DATABASES" && return 0
    fi
}

# Get the status of the daemon process.
get_daemon_status () {
    check_server_running && return 0
}

## Stopping the server.
do_stop () {
    echo -n "Stopping $DESC: "
    killproc -p $PIDFILE $NAME && rm -f $PIDFILE
}

## Restarting the server.
do_restart () {
    stop
    start
}

case "$1" in
    start)
        if do_start; then
            echo  "$NAME."
        else
            echo "failed."
        fi
        ;;
    stop)
        if do_stop; then
            echo "$NAME."
        else
            echo "failed."
        fi
        ;;

    restart|force-reload)
        do_restart
        ;;
    status)
        if get_daemon_status; then
            echo "$DESC is running in port $PORT and PID $(pidof $DAEMON)."
            exit 0
        fi
        ;;
    *)
        echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload|status}" >&2
        exit 1
        ;;
esac

exit 0
